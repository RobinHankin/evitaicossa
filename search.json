[{"path":"https://robinhankin.github.io/evitaicossa/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor covenant code of conduct","title":"Contributor covenant code of conduct","text":"members, contributors, leaders wish make participation community pleasant productive experience everyone. try act interact ways contribute open, welcoming, inclusive, healthy community. assume good faith, per WP:AGF. Examples behaviour contributes positive environment community include: Demonstrating empathy kindness toward people Communicating respectfully differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community","code":""},{"path":"https://robinhankin.github.io/evitaicossa/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to evitaicossa","title":"Contributing to evitaicossa","text":"Thank considering contributing evitaicossa! appreciate interest making project better. Please read adhere Code Conduct maintain safe, welcoming, inclusive environment. Various forms contributions welcome: Bug Reports: Feel free report bugs encounter. Documentation: Typos, clarity issues, missing guides: help welcome . Feature Discussions/Requests: Got idea? Open issue discuss potential. Code Contributions: code contributions welcome. Tests checks run CI, however locally one can use: devtools::test(). Ideally change documented. Major changes vignettes.","code":""},{"path":"https://robinhankin.github.io/evitaicossa/articles/evitaicossa.html","id":"antiassociative-algebras","dir":"Articles","previous_headings":"","what":"Antiassociative algebras","title":"Antiassociative algebras with R: the `evitaicossa` package","text":"Algebras satisfying 𝐮(𝐯𝐰)=−(𝐮𝐯)𝐰\\mathbf{u}(\\mathbf{v}\\mathbf{w})=-(\\mathbf{u}\\mathbf{v})\\mathbf{w} exhibit startling behaviour. Firstly, vector space scalars except 0∈ℝ0\\\\mathbb{R}. Proof: x∈ℝx\\\\mathbb{R}, x3=x(xx)=−(xx)x=−x3x^3=x(xx)=-(xx)x=-x^3; thus x3=−x3x^3=-x^3, x=0x=0. Secondly, antiassociative algebras nilpotent order 4: (𝐚𝐛)(𝐜𝐝)=−𝐚(𝐛(𝐜𝐝))=𝐚((𝐛𝐜)𝐝)=−(𝐚(𝐛𝐜))𝐝=((𝐚𝐛)𝐜)𝐝=−(𝐚𝐛)(𝐜𝐝) (\\mathbf{}\\mathbf{b})(\\mathbf{c}\\mathbf{d}) = -\\mathbf{}(\\mathbf{b}(\\mathbf{c}\\mathbf{d})) = \\mathbf{}((\\mathbf{b}\\mathbf{c})\\mathbf{d}) = -(\\mathbf{}(\\mathbf{b}\\mathbf{c}))\\mathbf{d} = ((\\mathbf{}\\mathbf{b})\\mathbf{c})\\mathbf{d} = -(\\mathbf{}\\mathbf{b})(\\mathbf{c}\\mathbf{d}) see (𝐚𝐛)(𝐜𝐝)=−(𝐚𝐛)(𝐜𝐝)(\\mathbf{}\\mathbf{b})(\\mathbf{c}\\mathbf{d})=-(\\mathbf{}\\mathbf{b})(\\mathbf{c}\\mathbf{d}) 𝐚𝐛𝐜𝐝\\mathbf{}\\mathbf{b}\\mathbf{c}\\mathbf{d} (however bracketed) must zero.","code":""},{"path":"https://robinhankin.github.io/evitaicossa/articles/evitaicossa.html","id":"the-free-antiassociative-algebra","dir":"Articles","previous_headings":"","what":"The free antiassociative algebra","title":"Antiassociative algebras with R: the `evitaicossa` package","text":"consider vector spaces generated finite alphabet symbols 𝐱1,…,𝐱n\\mathbf{x}_1,\\ldots,\\mathbf{x}_n. denoted generally single letter, 𝐚,𝐛,…,𝐳\\mathbf{},\\mathbf{b},\\ldots,\\mathbf{z}. now consider algebra spanned products linear combinations symbols, subject axioms algebra [antiassociative relation 𝐮(𝐯𝐰)=−(𝐮𝐯)𝐰\\mathbf{u}(\\mathbf{v}\\mathbf{w})=-(\\mathbf{u}\\mathbf{v})\\mathbf{w}]. Given alphabet 𝐱1,…,𝐱n\\mathbf{x}_1,\\ldots,\\mathbf{x}_n, general form element antiassociative algebra ∑iαi𝐱i+∑,jαij𝐱i𝐱j+∑,j,kαijk(𝐱i𝐱j)𝐱k \\sum_{}\\alpha_i\\mathbf{x}_i + \\sum_{,j}\\alpha_{ij}\\mathbf{x}_i\\mathbf{x}_j+ \\sum_{,j,k}\\alpha_{ijk}(\\mathbf{x}_i\\mathbf{x}_j)\\mathbf{x}_k (see Remm (2024) proof, note uses 𝐱i(𝐱j𝐱k)\\mathbf{x}_i(\\mathbf{x}_j\\mathbf{x}_k) rather (𝐱i𝐱j)𝐱k(\\mathbf{x}_i\\mathbf{x}_j)\\mathbf{x}_k triple products; brief discussion given appendix). package, components first term ∑iαi𝐱i\\sum_{}\\alpha_i\\mathbf{x}_i known “single-symbol” terms [𝐱i\\mathbf{x}_i] coefficients [αi\\alpha_i] respectively. Similarly, components ∑,jαij𝐱i𝐱j\\sum_{,j}\\alpha_{ij}\\mathbf{x}_i\\mathbf{x}_j known “double-symbol” terms coefficients; components ∑,j,kαijk(𝐱i𝐱j)𝐱k\\sum_{,j,k}\\alpha_{ijk}(\\mathbf{x}_i\\mathbf{x}_j)\\mathbf{x}_k “triple-symbol” terms coefficients. Addition performed elementwise among single-, double-, triple- components; result (formal) composition three results. Given =∑iαi𝐱i+∑,jαij𝐱i𝐱j+∑,j,kαijk(𝐱i𝐱j)𝐱kA= \\sum_{}\\alpha_i\\mathbf{x}_i + \\sum_{,j}\\alpha_{ij}\\mathbf{x}_i\\mathbf{x}_j+ \\sum_{,j,k}\\alpha_{ijk}(\\mathbf{x}_i\\mathbf{x}_j)\\mathbf{x}_k B=∑iβi𝐱i+∑,jβij𝐱i𝐱j+∑,j,kβijk(𝐱i𝐱j)𝐱kB= \\sum_{}\\beta_i\\mathbf{x}_i + \\sum_{,j}\\beta_{ij}\\mathbf{x}_i\\mathbf{x}_j+ \\sum_{,j,k}\\beta_{ijk}(\\mathbf{x}_i\\mathbf{x}_j)\\mathbf{x}_k (sums run 11 nn), define sum +BA+B ∑(αi+βi)𝐱i+∑,j(αij+βij)𝐱i𝐱j+∑,j,k(αijk+βijk)(𝐱i𝐱j)𝐱k \\sum_{}(\\alpha_i+\\beta_i)\\mathbf{x}_i + \\sum_{,j}(\\alpha_{ij}+\\beta_{ij})\\mathbf{x}_i\\mathbf{x}_j+ \\sum_{,j,k}(\\alpha_{ijk}+\\beta_{ijk})(\\mathbf{x}_i\\mathbf{x}_j)\\mathbf{x}_k Multiplication slightly involved. define product ABAB ∑,jαiβij𝐱i𝐱j+∑,j,kαijβk(𝐱i𝐱j)𝐱k−∑,j,kαiβjk(𝐱i𝐱j)𝐱k. \\sum_{,j}\\alpha_i\\beta_{ij}\\mathbf{x}_i\\mathbf{x}_j +\\sum_{,j,k}\\alpha_{ij}\\beta_{k}(\\mathbf{x}_i\\mathbf{x}_j)\\mathbf{x}_k -\\sum_{,j,k}\\alpha_i\\beta_{jk}(\\mathbf{x}_i\\mathbf{x}_j)\\mathbf{x}_k. minus sign front third term embodies antiassociativity.","code":""},{"path":"https://robinhankin.github.io/evitaicossa/articles/evitaicossa.html","id":"the-evitaicossa-package","dir":"Articles","previous_headings":"","what":"The evitaicossa package","title":"Antiassociative algebras with R: the `evitaicossa` package","text":"evitaicossa package implements relations context R-centric suite software. give examples package use. good place start function raaa(), returns simple random element free antiassociative algebra: (default alphabet command {𝐚,𝐛,𝐜,𝐝}\\left\\lbrace\\mathbf{},\\mathbf{b},\\mathbf{c},\\mathbf{d}\\right\\rbrace). see print method package shows structure object. one single-symbol elements, double-symbol triple-symbol elements. possible create elements using aaa() .aaa() functions: apply arithmetic operations objects: (, note cancellation x+x1). Multiplication also implemented (package idiom use asterisk *): Check: end remarkable identity: (𝐚+𝐚𝐱)(𝐛+𝐱𝐛)=𝐚𝐛 (\\mathbf{}+\\mathbf{}\\mathbf{x})(\\mathbf{b} + \\mathbf{x}\\mathbf{b})=\\mathbf{}\\mathbf{b} Numerically:","code":"raaa() ## free antiassociative algebra element: ## +1a +1c +2d +1b.c +1c.b +1c.c +2(b.a)a +1(b.b)c +1(b.c)a x  <- as.aaa(c(\"p\",\"q\",\"r\")) x1 <- aaa(s1 = c(\"p\",\"r\",\"x\"),c(-1,5,6)) y <- aaa(d1 = letters[1:3],d2 = c(\"foo\",\"bar\",\"baz\"),dc=1:3) z <- aaa(     t1 = c(\"bar\",\"bar\",\"bar\"),     t2 = c(\"q\",\"r\",\"s\"),     t3 = c(\"foo\",\"foo\",\"bar\"),     tc = 5:7) x ## free antiassociative algebra element: ## +1p +1q +1r x1 ## free antiassociative algebra element: ## -1p +5r +6x x+x1 ## free antiassociative algebra element: ## +1q +6r +6x x*(x1+y) ## free antiassociative algebra element: ## -1p.p +5p.r +6p.x -1q.p +5q.r +6q.x -1r.p +5r.r +6r.x -1(p.a)foo -2(p.b)bar ## -3(p.c)baz -1(q.a)foo -2(q.b)bar -3(q.c)baz -1(r.a)foo -2(r.b)bar -3(r.c)baz x*(x1+y) == x*x1 + x*y ## [1] TRUE a <- raaa() b <- raaa() x <- raaa() (a+a*x)*(b+x*b) == a*b ## [1] TRUE"},{"path":"https://robinhankin.github.io/evitaicossa/articles/evitaicossa.html","id":"extract-and-replace-methods","dir":"Articles","previous_headings":"","what":"Extract and replace methods","title":"Antiassociative algebras with R: the `evitaicossa` package","text":"tripartite nature antiassociative algebra, package provides three families extraction methods: single(), double() triple(), return different components object: corresponding replacement methods also implemented: Square bracket extraction replacement also implemented: pass named arguments ( et seq.) appropriate aaa object returned. Zero coefficients discarded. mode also implements replacement methods: square bracket method pass (unnamed) character vector:","code":"a ## free antiassociative algebra element: ## +4a +1b +2a.b +2c.c +2d.d +1(c.d)a +4(d.b)c +4(d.d)b single(a) ## free antiassociative algebra element: ## +4a +1b double(a) ## free antiassociative algebra element: ## +2a.b +2c.c +2d.d triple(a) ## free antiassociative algebra element: ## +1(c.d)a +4(d.b)c +4(d.d)b single(a) <- 0 a ## free antiassociative algebra element: ## +2a.b +2c.c +2d.d +1(c.d)a +4(d.b)c +4(d.d)b double(a) <- double(b) * 1000 a ## free antiassociative algebra element: ## +2000b.b +1000b.d +2000c.d +1(c.d)a +4(d.b)c +4(d.d)b (a <- raaa(s=5)) ## free antiassociative algebra element: ## +4a +9c +3b.c +1b.d +2c.b +3d.a +2d.c +2(a.d)d +3(b.a)a +3(b.c)d +1(c.d)d ## +3(d.c)b a[s1=c(\"c\",\"e\"),t1=\"c\",t2=\"d\",t3=\"d\"] ## free antiassociative algebra element: ## +9c +1(c.d)d (a <- raaa(s=5)) ## free antiassociative algebra element: ## +8a +3b +1a.b +3b.c +4c.c +4c.d +2(a.c)c +4(b.c)a +4(b.c)d +4(c.a)c +1(c.d)d a[s1=\"a\",d1=c(\"c\",\"w\"),d2=c(\"d\",\"w\")] <- 888 a ## free antiassociative algebra element: ## +888a +3b +1a.b +3b.c +4c.c +888c.d +888w.w +2(a.c)c +4(b.c)a +4(b.c)d +4(c.a)c ## +1(c.d)d (a <- raaa()) ## free antiassociative algebra element: ## +1a +2c +2d +3b.a +3b.b +3c.c +2(a.d)d +2(b.c)a +4(c.d)b"},{"path":"https://robinhankin.github.io/evitaicossa/articles/evitaicossa.html","id":"note-on-disordr-discipline","dir":"Articles","previous_headings":"Extract and replace methods","what":"Note on disordR discipline","title":"Antiassociative algebras with R: the `evitaicossa` package","text":"try access symbols coefficients aaa object [functions s1() sc() respectively], get disord object (Hankin 2022b). Suppose wish extract single-symbol terms single-symbol coefficients: See hash codes symbols coeffients match. However, double-symbol terms coefficients, internally matching, differ single-symbol stuff: , see double-symbol terms double-symbol coefficients consistent hashes, match single-symbol objects (indeed triple-symbol objects).","code":"x ## free antiassociative algebra element: ## +5c +1d +3a.c +4d.a +1d.b +1(a.a)d +2(b.d)a +3(d.d)a s1(x) ## A disord object with hash 059117d244e1291a3c3e4e94c5ad5bbc0ed7c254 and elements ## [1] \"c\" \"d\" ## (in some order) sc(x) ## A disord object with hash 059117d244e1291a3c3e4e94c5ad5bbc0ed7c254 and elements ## [1] 5 1 ## (in some order) list(d1(x),d2(x),dc(x)) ## [[1]] ## A disord object with hash c3d0273c48d84843b58af77622164b0c0a319848 and elements ## [1] \"a\" \"d\" \"d\" ## (in some order) ##  ## [[2]] ## A disord object with hash c3d0273c48d84843b58af77622164b0c0a319848 and elements ## [1] \"c\" \"a\" \"b\" ## (in some order) ##  ## [[3]] ## A disord object with hash c3d0273c48d84843b58af77622164b0c0a319848 and elements ## [1] 3 4 1 ## (in some order)"},{"path":"https://robinhankin.github.io/evitaicossa/articles/evitaicossa.html","id":"matrix-index-extraction","dir":"Articles","previous_headings":"","what":"Matrix index extraction","title":"Antiassociative algebras with R: the `evitaicossa` package","text":"square bracket extraction given index matrix, interpreted rowwise:","code":"l <- letters[1:3] (a <- aaa(s1=l,sc=1:3, d1=l,d2=rev(l),dc=3:1,t1=l,t2=l,t3=rev(l),tc=1:3)) ## free antiassociative algebra element: ## +1a +2b +3c +3a.c +2b.b +1c.a +1(a.a)c +2(b.b)b +3(c.c)a a[cbind(l,l)] ## free antiassociative algebra element: ## +2b.b a[cbind(rev(l),l,l)] <- 88 a ## free antiassociative algebra element: ## +1a +2b +3c +3a.c +2b.b +1c.a +1(a.a)c +88(a.c)c +88(b.b)b +88(c.a)a +3(c.c)a"},{"path":"https://robinhankin.github.io/evitaicossa/articles/evitaicossa.html","id":"note-on-generalized-antiassociativity","dir":"Articles","previous_headings":"","what":"Note on generalized antiassociativity","title":"Antiassociative algebras with R: the `evitaicossa` package","text":"may generalize antiassociativity 𝐚(𝐛𝐜)=k(𝐚𝐛)𝐜\\mathbf{}(\\mathbf{b}\\mathbf{c})=k(\\mathbf{}\\mathbf{b})\\mathbf{c}. Thus associativity recovered k=1k=1 antiassociativity k=−1k=-1. nilpotence argument becomes: (𝐚𝐛)(𝐜𝐝)=k−1𝐚(𝐛(𝐜𝐝))=𝐚((𝐛𝐜)𝐝)=k(𝐚(𝐛𝐜))𝐝=k2((𝐚𝐛)𝐜)𝐝=k(𝐚𝐛)(𝐜𝐝) (\\mathbf{}\\mathbf{b})(\\mathbf{c}\\mathbf{d}) = k^{-1}\\mathbf{}(\\mathbf{b}(\\mathbf{c}\\mathbf{d})) = \\mathbf{}((\\mathbf{b}\\mathbf{c})\\mathbf{d}) = k(\\mathbf{}(\\mathbf{b}\\mathbf{c}))\\mathbf{d} = k^2((\\mathbf{}\\mathbf{b})\\mathbf{c})\\mathbf{d} = k(\\mathbf{}\\mathbf{b})(\\mathbf{c}\\mathbf{d}) value kk may set compile-time editing file src/anti.h. line question reads: possible change value K. Note cause test_aac.R, one testthat suite, fail R CMD check.","code":"#define K -1 // a(bc) == K(ab)c"},{"path":"https://robinhankin.github.io/evitaicossa/articles/evitaicossa.html","id":"appendix","dir":"Articles","previous_headings":"Note on generalized antiassociativity","what":"Appendix","title":"Antiassociative algebras with R: the `evitaicossa` package","text":"noted , Remm (2024) uses 𝐱i(𝐱j𝐱k)\\mathbf{x}_i(\\mathbf{x}_j\\mathbf{x}_k) rather (𝐱i𝐱j)𝐱k(\\mathbf{x}_i\\mathbf{x}_j)\\mathbf{x}_k triple products. chose latter R idiom multiplication left associative: see x*x*x interpreted (x*x)*x, sign convention package adopted.","code":"x <- 3 class(x) <- \"foo\" `*.foo` <- function(x,y){x + y + x} print.foo <- function(x){print(unclass(x))} c(`(x*x)*x` = (x*x)*x,  `x*(x*x)` = x*(x*x),  `x*x*x` = x*x*x) ## (x*x)*x x*(x*x)   x*x*x  ##      21      15      21"},{"path":[]},{"path":"https://robinhankin.github.io/evitaicossa/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robin K. S. Hankin. Author, maintainer.","code":""},{"path":"https://robinhankin.github.io/evitaicossa/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hankin RK (2025). evitaicossa: Antiassociative Algebra. R package version 0.0-3, https://robinhankin.github.io/evitaicossa/, https://github.com/RobinHankin/evitaicossa.","code":"@Manual{,   title = {evitaicossa: Antiassociative Algebra},   author = {Robin K. S. Hankin},   year = {2025},   note = {R package version 0.0-3, https://robinhankin.github.io/evitaicossa/},   url = {https://github.com/RobinHankin/evitaicossa}, }"},{"path":[]},{"path":"https://robinhankin.github.io/evitaicossa/index.html","id":"section","dir":"","previous_headings":"","what":"Antiassociative Algebra","title":"Antiassociative Algebra","text":"algebra vector space equipped bilinear product: vectors may multiplied. Algebras may defined field use real numbers. antiassociative algebra algebra usual associativity relation  vector multiplication replaced . Antiassociative algebras nilpotent nilindex 4: product four vectors zero. Antiassociative algebras direct sum elements degree 1,2 3 (antiassociativity condition implies degree zero component trivial, nilpotence ensures components degree four exist). Thus general form element antiassociative algebra thus  , ,  constants  indeterminates. evitaicossa package provides R-centric functionality working antiassociative algebras. R session, can install released version package CRAN : package includes single S4 class aaa [“antiassociative algebra”] range functions create objects class. good place start function raaa(), creates random object class aaa: , see objects evita, icossa itna random antiassociative algebra elements, indeterminates , b, c, d. objects may combined standard arithmetic operations: possible verify axioms follows: details, see package vignette vignette(\"evitaicossa\")","code":"# install.packages(\"evitaicossa\")  # uncomment to install the package library(\"evitaicossa\")             # loads the package (evita <- raaa()) #> free antiassociative algebra element: #> +1a +3b +2d +3a.b +1c.b +1c.c +1(a.b)a +1(b.b)c +1(b.c)a (icossa <- raaa()) #> free antiassociative algebra element: #> +4a +2b +2a.a +2c.c +2d.d +2(b.d)d +1(c.d)a +4(d.b)c (itna <- raaa()) #> free antiassociative algebra element: #> +2a +2c +4d +1b.d +2c.b +2c.d +3(b.a)d +3(b.b)c +4(b.c)b evita+icossa #> free antiassociative algebra element: #> +5a +5b +2d +2a.a +3a.b +1c.b +3c.c +2d.d +1(a.b)a +1(b.b)c +1(b.c)a +2(b.d)d #> +1(c.d)a +4(d.b)c evita*icossa #> free antiassociative algebra element: #> +4a.a +2a.b +12b.a +6b.b +8d.a +4d.b -2(a.a)a +12(a.b)a +6(a.b)b -2(a.c)c #> -2(a.d)d -6(b.a)a -6(b.c)c -6(b.d)d +4(c.b)a +2(c.b)b +4(c.c)a +2(c.c)b #> -4(d.a)a -4(d.c)c -4(d.d)d c( left_distributive  = evita*(icossa + itna) == evita*icossa + evita*itna, right_distributive = (evita + icossa)*itna == evita*itna + icossa*itna, antiassociative    = evita*(icossa*itna)   == -(evita*icossa)*itna ) #>  left_distributive right_distributive    antiassociative  #>               TRUE               TRUE               TRUE"},{"path":"https://robinhankin.github.io/evitaicossa/reference/Arith-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic methods for aaa objects — Arith-methods","title":"Arithmetic methods for aaa objects — Arith-methods","text":"Arithmetic methods objects class aaa.","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/Arith-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Arithmetic methods for aaa objects — Arith-methods","text":"signature(e1 = \"aaa\", e2 = \"aaa\") Dispatches aaa_arith_aaa() signature(e1 = \"aaa\", e2 = \"numeric\") Dispatches aaa_arith_numeric() signature(e1 = \"numeric\", e2 = \"aaa\") Dispatches numeric_arith_aaa() S4 methods call lower-level functions aaa_plus_aaa(), aaa_prod_aaa(), aaa_prod_numeric(), aaa_negative(), aaa_plus_numeric(). functions call Rcpp functions aaa_identity(), c_aaa_add(), c_aaa_prod().","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/Compare-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparison methods for antiassociative algebra — Compare-methods","title":"Comparison methods for antiassociative algebra — Compare-methods","text":"Comparison methods generally make sense elements  antiassociative algebra.  exception equality: x == y  returns TRUE aaa objects x y  identical. test equality follows frab package: go  keys x, compare corresponding values y,  return FALSE difference detected.  faster  .zero(x-y). Technically, x==0 makes sense thought consistency  important: package, numeric values compared  aaa objects. Functions aaa_compare_aaa() etc. used S4  dispatch; c_aaa_equal() low-level helper function uses  Rcpp call appropriate C routine.","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/Compare-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Comparison methods for antiassociative algebra — Compare-methods","text":"signature(e1 = \"aaa\", e2 = \"aaa\")  signature(e1 = \"aaa\", e2 = \"\")  signature(e1 = \"aaa\", e2 = \"numeric\")  signature(e1 = \"\", e2 = \"aaa\")  signature(e1 = \"numeric\", e2 = \"aaa\")","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/Extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract or Replace Parts of aaa objects — Extract","title":"Extract or Replace Parts of aaa objects — Extract","text":"Extraction methods aaa objects.  names   two-letter functions arguments follow pattern: initial   letter (s, d, t) stands “single”, “double”,   “triple”; second symbol c “coefficients”,   number (1, 2, 3) denoting first, second, third.  Thus   “dc()” gets coefficients double-symbol   components, “t2()” gets second symbol   triple-symbol components.","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/Extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract or Replace Parts of aaa objects — Extract","text":"","code":"# S4 method for class 'aaa' s1(a) # S4 method for class 'aaa' sc(a) # S4 method for class 'aaa' d1(a) # S4 method for class 'aaa' d2(a) # S4 method for class 'aaa' dc(a) # S4 method for class 'aaa' t1(a) # S4 method for class 'aaa' t2(a) # S4 method for class 'aaa' t3(a) # S4 method for class 'aaa' tc(a) single(a) double(a) triple(a)"},{"path":"https://robinhankin.github.io/evitaicossa/reference/Extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract or Replace Parts of aaa objects — Extract","text":"Object class aaa","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/Extract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract or Replace Parts of aaa objects — Extract","text":"aaa object list 9 vectors, three numeric six   character, extracted functions s1() etc. Functions single(), double()   triple() extract single, double, triple components   argument, return corresponding aaa object. function evitaicossa::coeffs() three   types elements qualitatively different; use sc(),   dc(), tc() get coefficients disord   format. Functions getthings(), extracter()   overwriter() lower-level methods, really intended   end-user.  Function getthings() takes aaa object   returns named list elements disord objects   corresponding components s1,sc,d1 etc.   Function extracter() takes aaa object arguments   s1, d1,d2,t1 etc. returns   aaa object corresponding specified index elements.   Function overwriter takes Functions single(), double(), triple() return   index-1, index-2, index-3 components arguments   respectively.  Functions single<-() et seq.   corresponding setting methods overwrite index-1 (resp. 2,3)   components right hand side.  right hand side must   purely correct component otherwise error returned; thus   double() <- x, example, single-symbol   triple-symbol components x must zero. Square bracket extraction replacement methods   user-friendly.  operate two distinct modes.  given named   arguments (s1, d1,d2, et seq.)   interpreted symbols coefficients different orders.   given unnamed argument, interpreted character   vector length one, two, three specifying particular term   object.  See examples.","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/Extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract or Replace Parts of aaa objects — Extract","text":"Return disord aaa objects","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/Extract.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract or Replace Parts of aaa objects — Extract","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/Extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract or Replace Parts of aaa objects — Extract","text":"","code":"x <- linear1(1:3) + (linear1(1:2) + linear2(1:3))^2 x #> free antiassociative algebra element: #> +1a +2b +3c +1a.a +2a.b +2b.a +4b.b +2(a.a)b -2(a.b)b -3(a.c)c -2(b.a)a #> +2(b.b)a -6(b.c)c +3(c.c)a +6(c.c)b x[d1=c(\"a\",\"a\"),d2=c(\"a\",\"b\")] #> free antiassociative algebra element: #> +1a.a +2a.b x[s1=\"a\", t1=\"b\", t2=\"c\", t3=\"c\"] #> free antiassociative algebra element: #> +1a -6(b.c)c   x[s1=\"a\", t1=\"b\", t2=\"c\", t3=\"c\"] <- 88 x #> free antiassociative algebra element: #> +88a +2b +3c +1a.a +2a.b +2b.a +4b.b +2(a.a)b -2(a.b)b -3(a.c)c -2(b.a)a #> +2(b.b)a +88(b.c)c +3(c.c)a +6(c.c)b x[c(\"c\",\"c\",\"b\")] <- -777 x #> free antiassociative algebra element: #> +88a +2b +3c +1a.a +2a.b +2b.a +4b.b +2(a.a)b -2(a.b)b -3(a.c)c -2(b.a)a #> +2(b.b)a +88(b.c)c +3(c.c)a -777(c.c)b   a <- raaaa() sc(a) #> A disord object with hash bfccd2d2e8fa0773e6fda3a034b823c2629d74fb and elements #>  [1]  2 31 10 16 33 19 20  2 13  6 #> (in some order) t2(a) #> A disord object with hash 58a673119a16074ec2509c8fa2c595708df2c923 and elements #>  [1] \"d\" \"h\" \"h\" \"c\" \"e\" \"h\" \"d\" \"e\" \"i\" \"j\" \"b\" \"b\" \"h\" \"j\" \"b\" \"f\" \"f\" \"b\" \"c\" #> [20] \"e\" \"j\" \"a\" \"b\" \"c\" \"g\" \"i\" \"j\" \"a\" \"d\" \"f\" #> (in some order) single(a) #> free antiassociative algebra element: #> +2a +31b +10c +16d +33e +19f +20g +2h +13i +6j  single(a) + double(a) + triple(a) == a  # should be TRUE #> [1] TRUE  aaa(d1=d1(a),d2=d2(a), dc=dc(a)) == double(a) #> [1] TRUE  x <- raaaa() single(x) <- 0 double(x) <- double(raaa())"},{"path":"https://robinhankin.github.io/evitaicossa/reference/Show.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for antiassociative algebra objects — show","title":"Print method for antiassociative algebra objects — show","text":"Show methods aaa objects","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/Show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for antiassociative algebra objects — show","text":"","code":"# S4 method for class 'aaa' show(object) aaa_show(a)"},{"path":"https://robinhankin.github.io/evitaicossa/reference/Show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for antiassociative algebra objects — show","text":",object Object class aaa","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/Show.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print method for antiassociative algebra objects — show","text":"bunch functionality print aaa objects. Function putsign() low-level helper function puts   sign (, + -) element numeric   vector.  Functions single_string(), double_string(),   triple_string() process 1,2, 3- symbols printing.","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/Show.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for antiassociative algebra objects — show","text":"return value, called side-effects","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/Show.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print method for antiassociative algebra objects — show","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/Show.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for antiassociative algebra objects — show","text":"","code":"aaa_show(raaa()) #> [1] +1a +4b +2c +4a.b +1c.b +2d.d +4(a.c)b +2(b.d)a +1(d.d)c aaa_show(aaa()) #> [1]"},{"path":"https://robinhankin.github.io/evitaicossa/reference/aaa-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Class aaa elements free antiassociative algebra","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/aaa-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Objects can created calls form new(\"aaa\", ...).","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/aaa-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"single_indeterminate_name1: Object class \"character\" single_indeterminate_coeff: Object class \"numeric\" double_indeterminate_name1: Object class \"character\" double_indeterminate_name2: Object class \"character\" double_indeterminate_coeff: Object class \"numeric\" triple_indeterminate_name1: Object class \"character\" triple_indeterminate_name2: Object class \"character\" triple_indeterminate_name3: Object class \"character\" triple_indeterminate_coeff: Object class \"numeric\"","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/aaa-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/aaa-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"aaa\") #> Class \"aaa\" [package \"evitaicossa\"] #>  #> Slots: #>                                                              #> Name:  single_indeterminate_name1 single_indeterminate_coeff #> Class:                  character                    numeric #>                                                              #> Name:  double_indeterminate_name1 double_indeterminate_name2 #> Class:                  character                  character #>                                                              #> Name:  double_indeterminate_coeff triple_indeterminate_name1 #> Class:                    numeric                  character #>                                                              #> Name:  triple_indeterminate_name2 triple_indeterminate_name3 #> Class:                  character                  character #>                                   #> Name:  triple_indeterminate_coeff #> Class:                    numeric"},{"path":"https://robinhankin.github.io/evitaicossa/reference/aaa.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to create objects of class aaa — aaa","title":"Function to create objects of class aaa — aaa","text":"Objects class aaa","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/aaa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to create objects of class aaa — aaa","text":"","code":"aaa(s1 = character(0), sc = numeric(0), d1 = character(0), d2 = character(0), dc = numeric(0), t1 = character(0), t2 = character(0), t3 = character(0), tc = numeric(0)) lavter(cout) as.aaa(s) thing_to_aaa(L)"},{"path":"https://robinhankin.github.io/evitaicossa/reference/aaa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to create objects of class aaa — aaa","text":"s1,d1,d2,t1,t2,t3 single, double, triple symbols sc,dc,tc single, double, triple coefficients L list elements s1 etc cout list s Object function .aaa() coerce     aaa object","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/aaa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to create objects of class aaa — aaa","text":"Function lavter() formal creation method aaa   objects; place new() called.  takes   single argument cout, list returned   C function retval().  However, little   awkward intended day--day use.  One use   functions creation, user-friendly sensible   defaults:  Function aaa() takes named arguments s1 etc,       defaults corresponding “present” Function thing_to_aaa() takes list names       s1 etc Function .aaa()       tries hard coerce argument aaa object","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/aaa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to create objects of class aaa — aaa","text":"Return objects class aaa","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/aaa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to create objects of class aaa — aaa","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/aaa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to create objects of class aaa — aaa","text":"","code":"aaa(s1 = \"x\", sc = 13) #> free antiassociative algebra element: #> +13x aaa(d1 = \"z\", d2 = \"w\", dc = 14) #> free antiassociative algebra element: #> +14z.w aaa(t1 = \"x\", t2 = \"y\", t3 = \"z\", tc = 15) #> free antiassociative algebra element: #> +15(x.y)z  aaa(     s1 = c(\"a\",\"d\"),     sc = c( 4 , 2 ),     d1 = c(\"a\", \"a\", \"a\", \"b\"),     d2 = c(\"a\", \"b\", \"d\", \"a\"),     dc = c( 3 ,  4 ,  4 ,  3 ),     t1 = c(\"a\", \"a\", \"a\", \"b\", \"b\"),     t2 = c(\"c\", \"d\", \"d\", \"c\", \"c\"),     t3 = c(\"a\", \"c\", \"d\", \"a\", \"b\"),     tc = c(-4 , -1 , -4 , 11 , 20 ) ) #> free antiassociative algebra element: #> +4a +2d +3a.a +4a.b +4a.d +3b.a -4(a.c)a -1(a.d)c -4(a.d)d +11(b.c)a +20(b.c)b   aaa() # the zero object #> the zero free antiassociative algebra element.  aaa(s1=letters,sc=seq_along(letters)) #> free antiassociative algebra element: #> +1a +2b +3c +4d +5e +6f +7g +8h +9i +10j +11k +12l +13m +14n +15o +16p +17q #> +18r +19s +20t +21u +22v +23w +24x +25y +26z aaa(d1=state.abb,d2=rev(state.abb),dc=seq_along(state.abb)) #> free antiassociative algebra element: #> +2AK.WI +1AL.WY +4AR.WA +3AZ.WV +5CA.VA +6CO.VT +7CT.UT +8DE.TX +9FL.TN #> +10GA.SD +11HI.SC +15IA.OK +12ID.RI +13IL.PA +14IN.OR +16KS.OH +17KY.ND #> +18LA.NC +21MA.NJ +20MD.NM +19ME.NY +22MI.NH +23MN.NV +25MO.MT +24MS.NE #> +26MT.MO +33NC.LA +34ND.KY +27NE.MS +29NH.MI +30NJ.MA +31NM.MD +28NV.MN #> +32NY.ME +35OH.KS +36OK.IA +37OR.IN +38PA.IL +39RI.ID +40SC.HI +41SD.GA #> +42TN.FL +43TX.DE +44UT.CT +46VA.CA +45VT.CO +47WA.AR +49WI.AK +48WV.AZ #> +50WY.AL  as.aaa(state.abb) #> free antiassociative algebra element: #> +1AK +1AL +1AR +1AZ +1CA +1CO +1CT +1DE +1FL +1GA +1HI +1IA +1ID +1IL +1IN +1KS #> +1KY +1LA +1MA +1MD +1ME +1MI +1MN +1MO +1MS +1MT +1NC +1ND +1NE +1NH +1NJ +1NM #> +1NV +1NY +1OH +1OK +1OR +1PA +1RI +1SC +1SD +1TN +1TX +1UT +1VA +1VT +1WA +1WI #> +1WV +1WY   evita <- aaa(s1=letters[1:5],sc=1:5) icossa <- aaa(d1=c(\"fish\",\"chips\"),d2=c(\"x\",\"y\"),dc=c(6,7))  evita #> free antiassociative algebra element: #> +1a +2b +3c +4d +5e evita + icossa #> free antiassociative algebra element: #> +1a +2b +3c +4d +5e +7chips.y +6fish.x evita * icossa #> free antiassociative algebra element: #> -7(a.chips)y -6(a.fish)x -14(b.chips)y -12(b.fish)x -21(c.chips)y -18(c.fish)x #> -28(d.chips)y -24(d.fish)x -35(e.chips)y -30(e.fish)x evita^2 #> free antiassociative algebra element: #> +1a.a +2a.b +3a.c +4a.d +5a.e +2b.a +4b.b +6b.c +8b.d +10b.e +3c.a +6c.b +9c.c #> +12c.d +15c.e +4d.a +8d.b +12d.c +16d.d +20d.e +5e.a +10e.b +15e.c +20e.d #> +25e.e  f <- function(o){aaa(state.abb[o],seq_along(o))} f(8:9) - (f(1:2) - f(6:8)^2)^2 #> free antiassociative algebra element: #> +1DE +2FL -4AK.AK -2AK.AL -2AL.AK -1AL.AL -2(AK.CO)CO -4(AK.CO)CT -6(AK.CO)DE #> -4(AK.CT)CO -8(AK.CT)CT -12(AK.CT)DE -6(AK.DE)CO -12(AK.DE)CT -18(AK.DE)DE #> -1(AL.CO)CO -2(AL.CO)CT -3(AL.CO)DE -2(AL.CT)CO -4(AL.CT)CT -6(AL.CT)DE #> -3(AL.DE)CO -6(AL.DE)CT -9(AL.DE)DE +2(CO.CO)AK +1(CO.CO)AL +4(CO.CT)AK #> +2(CO.CT)AL +6(CO.DE)AK +3(CO.DE)AL +4(CT.CO)AK +2(CT.CO)AL +8(CT.CT)AK #> +4(CT.CT)AL +12(CT.DE)AK +6(CT.DE)AL +6(DE.CO)AK +3(DE.CO)AL +12(DE.CT)AK #> +6(DE.CT)AL +18(DE.DE)AK +9(DE.DE)AL"},{"path":"https://robinhankin.github.io/evitaicossa/reference/allsymbols.html","id":null,"dir":"Reference","previous_headings":"","what":"All symbols in an aaa object — allsymbols","title":"All symbols in an aaa object — allsymbols","text":"Function allsymbols() returns character vector whose entries include symbols argument.","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/allsymbols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All symbols in an aaa object — allsymbols","text":"","code":"allsymbols(a)"},{"path":"https://robinhankin.github.io/evitaicossa/reference/allsymbols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"All symbols in an aaa object — allsymbols","text":"Object class aaa","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/allsymbols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"All symbols in an aaa object — allsymbols","text":"Returns character vector","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/allsymbols.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"All symbols in an aaa object — allsymbols","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/allsymbols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"All symbols in an aaa object — allsymbols","text":"","code":"a <- raaaa() a #> free antiassociative algebra element: #> +16a +5b +23c +14d +15e +16f +31g +18h +10i +29j +5a.b +7a.d +8a.e +6a.f +3b.c #> +5b.e +16b.h +1b.j +6c.a +9c.e +6d.e +1d.i +5d.j +1e.i +3f.f +3f.h +7f.i +4g.a #> +10g.d +2g.j +9h.c +5h.i +4h.j +4j.a +10j.c +3j.h +1j.i +8j.j +3(a.g)e +1(a.g)h #> +10(b.b)j +3(b.d)h +4(b.h)f +9(c.d)d +4(c.e)g +6(c.i)e +5(d.a)a +8(e.b)b #> +10(e.c)g +6(e.i)e +5(f.f)c +9(f.f)f +6(f.f)i +4(f.i)b +4(g.d)d +4(g.g)g #> +4(g.h)e +9(h.d)b +3(h.f)a +10(h.f)g +6(h.g)d +9(h.j)e +8(h.j)g +9(i.d)c #> +9(i.d)j +7(i.f)h +7(j.h)c +9(j.h)j allsymbols(a) #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"  a[cbind(allsymbols(a))] == single(a) #> [1] TRUE"},{"path":"https://robinhankin.github.io/evitaicossa/reference/evitaicossa-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Antiassociative Algebra — evitaicossa-package","title":"Antiassociative Algebra — evitaicossa-package","text":"Methods deal free antiassociative algebra       reals arbitrary number indeterminates.       Antiassociativity means (xy)z = -x(yz).  Antiassociative       algebras nilpotent nilindex four (Remm, 2022,       <doi:10.48550/arXiv.2202.10812>) drives design       philosophy package.  Methods defined create       manipulate arbitrary elements antiassociative algebra,       extract replace coefficients.  vignette       provided.","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/evitaicossa-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Antiassociative Algebra — evitaicossa-package","text":"DESCRIPTION file: package yet installed build time.   Index:  package yet installed build time. Functionality work free antiassociative algebra R.  hex sticker features image taken hoffnung1959;textualevitaicossa musical concepts [pizzicato, crescendo, etc] given whimsical visual form.  character hex sticker captioned “Discord”: Hoffnung's interpretation musical concept dissonance.  book, preceding image “chord”, evoking harmony.  discord, hand, embodies–least–antiassociativity: everything wrong, wrong, wrong.","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/evitaicossa-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Antiassociative Algebra — evitaicossa-package","text":"Robin K. S. Hankin [aut, cre] (<https://orcid.org/0000-0001-5982-0415>) Maintainer: Robin K. S. Hankin <hankin.robin@gmail.com>","code":""},{"path":[]},{"path":[]},{"path":"https://robinhankin.github.io/evitaicossa/reference/evitaicossa-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Antiassociative Algebra — evitaicossa-package","text":"","code":"x <- raaa() x #> free antiassociative algebra element: #> +5c +2d +4b.b +1c.c +4d.d +4(b.c)c +1(b.c)d +3(c.d)d y <- raaa()  x+y #> free antiassociative algebra element: #> +2a +1b +6c +2d +2b.a +4b.b +1c.c +4d.a +7d.d +3(a.c)b +1(b.b)b +4(b.c)c #> +1(b.c)d +2(c.d)c +3(c.d)d x*y #> free antiassociative algebra element: #> +10c.a +5c.b +5c.c +4d.a +2d.b +2d.c +8(b.b)a +4(b.b)b +4(b.b)c -10(c.b)a #> +2(c.c)a +1(c.c)b +1(c.c)c -20(c.d)a -15(c.d)d -4(d.b)a +4(d.d)b +4(d.d)c #> -6(d.d)d"},{"path":"https://robinhankin.github.io/evitaicossa/reference/jitter.html","id":null,"dir":"Reference","previous_headings":"","what":"Jittering aaa objects — jitter","title":"Jittering aaa objects — jitter","text":"Jitters components aaa object.","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/jitter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jittering aaa objects — jitter","text":"Returns disord","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/jitter.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Jittering aaa objects — jitter","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/jitter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Jittering aaa objects — jitter","text":"","code":"jitter(raaa()) #> free antiassociative algebra element: #> +5.18453609114513b +1.82390237841755d +6.07727591674775c.b +4.18216349873692c.c #> +2.19822741569951(a.c)b +1.99922210872173(a.d)b +0.892117907758802(c.b)c"},{"path":"https://robinhankin.github.io/evitaicossa/reference/linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear functions — linear","title":"Linear functions — linear","text":"Linear functions returning single, double, triple-symbol aaa   objects.","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear functions — linear","text":"","code":"linear1(x) linear2(x) linear3(x)"},{"path":"https://robinhankin.github.io/evitaicossa/reference/linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear functions — linear","text":"x numeric vector","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/linear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear functions — linear","text":"functions return antiassociative algebra element specified coefficients.  Given numeric vector v elements \\(v_1,v_2,\\ldots, v_n\\) linear1(v) returns \\(v_1\\mathbf{} + v_2\\mathbf{b}+\\cdots+ v_n\\mathbf{L_n}\\), \\(\\mathbf{L_n}\\) \\(n^\\mathrm{th}\\) letter alphabet.  Similarly, linear2(v) returns \\(v_1\\mathbf{}\\mathbf{}+\\cdots+ v_n\\mathbf{L_n}\\mathbf{L_n}\\), linear3(v) returns \\(v_1(\\mathbf{}\\mathbf{})\\mathbf{}+\\cdots+ v_n(\\mathbf{L_n}\\mathbf{L_n})\\mathbf{L_n}\\). linear sense $$   f(\\alpha\\mathbf{x}+\\beta\\mathbf{y})= \\alpha f(\\mathbf{x})+\\beta f(\\mathbf{y})$$ \\(\\alpha,\\beta\\\\mathbb{R}\\) \\(\\mathbf{x},\\mathbf{y}\\\\mathbb{R}^n\\).","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear functions — linear","text":"functions return object class aaa.","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/linear.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Linear functions — linear","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/linear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear functions — linear","text":"","code":"linear1(sample(8)) #> free antiassociative algebra element: #> +8a +1b +4c +2d +3e +5f +6g +7h linear2(sample(8)) #> free antiassociative algebra element: #> +3a.a +7b.b +5c.c +4d.d +8e.e +1f.f +6g.g +2h.h linear3(sample(8)) #> free antiassociative algebra element: #> +2(a.a)a +6(b.b)b +8(c.c)c +1(d.d)d +3(e.e)e +4(f.f)f +5(g.g)g +7(h.h)h  a <- 3 b <- 7 x <- sample(9) y <- sample(9)  linear1(a*x + b*y) == a*linear1(x) + b*linear1(y) #> [1] TRUE linear2(a*x + b*y) == a*linear2(x) + b*linear2(y) #> [1] TRUE linear3(a*x + b*y) == a*linear3(x) + b*linear3(y) #> [1] TRUE"},{"path":"https://robinhankin.github.io/evitaicossa/reference/raaa.html","id":null,"dir":"Reference","previous_headings":"","what":"Random elements of the free antiassociative algebra — raaa","title":"Random elements of the free antiassociative algebra — raaa","text":"Random elements free antiassociative algebra, intended quick “get going” examples aaa objects","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/raaa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random elements of the free antiassociative algebra — raaa","text":"","code":"raaa(n = 4, s = 3) raaaa(n = 10, s = 30)"},{"path":"https://robinhankin.github.io/evitaicossa/reference/raaa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random elements of the free antiassociative algebra — raaa","text":"n Number terms generate s Number symbols use alphabet","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/raaa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random elements of the free antiassociative algebra — raaa","text":"Function raaa() returns random  aaa object. Function raaaa() returns, default, complicated aaa object.","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/raaa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random elements of the free antiassociative algebra — raaa","text":"Returns object class aaa","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/raaa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random elements of the free antiassociative algebra — raaa","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/raaa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random elements of the free antiassociative algebra — raaa","text":"","code":"raaa() #> free antiassociative algebra element: #> +3c +2d +3a.d +2b.d +2d.a +4(a.c)d +3(c.c)c +4(d.d)d raaaa() #> free antiassociative algebra element: #> +27a +8b +10c +16d +12e +9f +34g +7h +10i +20j +3a.b +4a.d +11a.g +9a.i +8c.e #> +9c.f +4c.j +10d.c +8d.f +2e.a +1f.b +2f.j +6g.d +8g.f +12g.h +1h.c +11h.d #> +6h.j +10i.b +9i.e +13i.g +1i.h +2j.e +6j.j +1(a.c)e +1(a.e)d +3(a.f)j +7(a.h)f #> +1(b.a)h +9(c.d)b +9(c.f)c +4(c.g)a +3(c.j)i +8(d.b)e +8(d.e)a +4(d.e)c #> +7(d.h)i +4(e.b)c +5(f.a)a +9(f.a)c +9(f.e)d +5(f.h)j +10(f.i)b +1(f.i)d #> +7(f.j)j +7(g.g)b +10(g.j)c +1(h.j)j +5(i.d)i +8(j.d)g +2(j.g)i +2(j.h)a #> +5(j.h)j +9(j.i)g"},{"path":"https://robinhankin.github.io/evitaicossa/reference/zero.html","id":null,"dir":"Reference","previous_headings":"","what":"The additive zero in antiassociative algebras — zero","title":"The additive zero in antiassociative algebras — zero","text":"Function .zero() tests argument additive zero. Package idiom create zero element antiassociative algebra aaa().","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/zero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The additive zero in antiassociative algebras — zero","text":"","code":"is.zero(x)"},{"path":"https://robinhankin.github.io/evitaicossa/reference/zero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The additive zero in antiassociative algebras — zero","text":"x Object class aaa","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/zero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The additive zero in antiassociative algebras — zero","text":"Returns Boolean.","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/zero.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The additive zero in antiassociative algebras — zero","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/zero.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"The additive zero in antiassociative algebras — zero","text":"antiassociative algebra, scalar zero.","code":""},{"path":"https://robinhankin.github.io/evitaicossa/reference/zero.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The additive zero in antiassociative algebras — zero","text":"","code":"is.zero(raaa()) #> [1] FALSE is.zero(raaa()*0) #> [1] TRUE is.zero(aaa()) #> [1] TRUE"},{"path":"https://robinhankin.github.io/evitaicossa/news/index.html","id":"evitaicossa-00-3","dir":"Changelog","previous_headings":"","what":"evitaicossa 0.0-3","title":"evitaicossa 0.0-3","text":"C++17 idiom","code":""},{"path":"https://robinhankin.github.io/evitaicossa/news/index.html","id":"evitaicossa-00-2","dir":"Changelog","previous_headings":"","what":"evitaicossa 0.0-2","title":"evitaicossa 0.0-2","text":"Creation citation arxiv preprint pkgdown creation github workflow test coverage QC removal dependency mathjax bugfixes coverage","code":""},{"path":"https://robinhankin.github.io/evitaicossa/news/index.html","id":"evitaicossa-00-1","dir":"Changelog","previous_headings":"","what":"evitaicossa 0.0-1","title":"evitaicossa 0.0-1","text":"CRAN release: 2024-06-28 Initial release","code":""}]
